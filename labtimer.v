/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Demux1
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    input [0:0] sel,
    input in
);
    assign out_0 = (sel == 1'h0)? in : Default;
    assign out_1 = (sel == 1'h1)? in : Default;
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module labtimer (
  input CLK,
  input SW,
  input B3,
  input B2,
  input B1,
  input B0,
  input HZ1,
  output [3:0] M10,
  output [3:0] M1,
  output [3:0] S10,
  output [3:0] S1
);
  wire s0;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  wire s47;
  wire s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire [1:0] s57;
  wire [1:0] s58;
  wire s59;
  wire [1:0] s60;
  wire [1:0] s61;
  wire s62;
  wire s63;
  wire s64;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire s71;
  wire s72;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire s77;
  wire s78;
  wire s79;
  wire s80;
  wire s81;
  wire [1:0] s82;
  wire [1:0] s83;
  wire s84;
  wire [1:0] s85;
  wire [1:0] s86;
  wire s87;
  wire s88;
  wire s89;
  wire s90;
  wire s91;
  wire s92;
  wire s93;
  wire s94;
  wire s95;
  wire s96;
  wire s97;
  wire s98;
  wire s99;
  wire s100;
  wire s101;
  wire s102;
  wire s103;
  wire s104;
  wire s105;
  wire s106;
  wire [1:0] s107;
  wire [1:0] s108;
  wire s109;
  wire [1:0] s110;
  wire [1:0] s111;
  wire s112;
  wire s113;
  wire s114;
  wire s115;
  wire s116;
  wire s117;
  wire s118;
  wire s119;
  wire s120;
  wire s121;
  wire s122;
  wire s123;
  wire s124;
  wire s125;
  wire s126;
  wire s127;
  wire s128;
  wire s129;
  wire s130;
  wire s131;
  wire [1:0] s132;
  wire [1:0] s133;
  wire s134;
  wire [1:0] s135;
  wire [1:0] s136;
  wire s137;
  wire s138;
  wire s139;
  wire s140;
  wire s141;
  wire s142;
  wire s143;
  assign s0 = (SW & ~ B0);
  assign s8 = (SW & ~ B1);
  assign s9 = (SW & ~ B2);
  assign s11 = (SW & ~ B3);
  assign s37 = ~ SW;
  assign s36 = (s37 & HZ1);
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s2 ),
    .C( CLK ),
    .Q( s3 ),
    .\~Q ( s4 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s5 ),
    .C( CLK ),
    .Q( s6 ),
    .\~Q ( s7 )
  );
  assign s2 = ((s3 ^ s6) & s0);
  assign s5 = (s4 & s0 & s7);
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s12 ),
    .C( CLK ),
    .Q( s13 ),
    .\~Q ( s14 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s15 ),
    .C( CLK ),
    .Q( s16 ),
    .\~Q ( s17 )
  );
  assign s12 = ((s13 ^ s16) & s8);
  assign s15 = (s14 & s8 & s17);
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i4 (
    .D( s18 ),
    .C( CLK ),
    .Q( s19 ),
    .\~Q ( s20 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i5 (
    .D( s21 ),
    .C( CLK ),
    .Q( s22 ),
    .\~Q ( s23 )
  );
  assign s18 = ((s19 ^ s22) & s9);
  assign s21 = (s20 & s9 & s23);
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i6 (
    .D( s24 ),
    .C( CLK ),
    .Q( s25 ),
    .\~Q ( s26 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( s27 ),
    .C( CLK ),
    .Q( s28 ),
    .\~Q ( s29 )
  );
  assign s24 = ((s25 ^ s28) & s11);
  assign s27 = (s26 & s11 & s29);
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s30 ),
    .C( CLK ),
    .Q( s31 ),
    .\~Q ( s32 )
  );
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s33 ),
    .C( CLK ),
    .Q( s34 ),
    .\~Q ( s35 )
  );
  assign s30 = ((s31 ^ s34) & s36);
  assign s33 = (s32 & s36 & s35);
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s38 ),
    .C( CLK ),
    .Q( s39 ),
    .\~Q ( s40 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i11 (
    .D( s41 ),
    .C( CLK ),
    .Q( s42 ),
    .\~Q ( s43 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i12 (
    .D( s44 ),
    .C( CLK ),
    .Q( s45 ),
    .\~Q ( s46 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i13 (
    .D( s47 ),
    .C( CLK ),
    .Q( s48 ),
    .\~Q ( s49 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i14 (
    .D( s63 ),
    .C( CLK ),
    .Q( s64 ),
    .\~Q ( s65 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i15 (
    .D( s66 ),
    .C( CLK ),
    .Q( s67 ),
    .\~Q ( s68 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i16 (
    .D( s69 ),
    .C( CLK ),
    .Q( s70 ),
    .\~Q ( s71 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i17 (
    .D( s72 ),
    .C( CLK ),
    .Q( s73 ),
    .\~Q ( s74 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i18 (
    .D( s88 ),
    .C( CLK ),
    .Q( s89 ),
    .\~Q ( s90 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i19 (
    .D( s91 ),
    .C( CLK ),
    .Q( s92 ),
    .\~Q ( s93 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i20 (
    .D( s94 ),
    .C( CLK ),
    .Q( s95 ),
    .\~Q ( s96 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i21 (
    .D( s97 ),
    .C( CLK ),
    .Q( s98 ),
    .\~Q ( s99 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i22 (
    .D( s113 ),
    .C( CLK ),
    .Q( s114 ),
    .\~Q ( s115 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i23 (
    .D( s116 ),
    .C( CLK ),
    .Q( s117 ),
    .\~Q ( s118 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i24 (
    .D( s119 ),
    .C( CLK ),
    .Q( s120 ),
    .\~Q ( s121 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i25 (
    .D( s122 ),
    .C( CLK ),
    .Q( s123 ),
    .\~Q ( s124 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i26 (
    .D( s141 ),
    .C( CLK ),
    .Q( s139 )
  );
  assign s141 = ((s139 | (s137 & s112 & s87 & s62)) & s37);
  assign S1[0] = s39;
  assign S1[1] = s42;
  assign S1[2] = s45;
  assign S1[3] = s48;
  assign s62 = (~ s39 & ~ s42 & ~ s45 & ~ s48);
  assign S10[0] = s64;
  assign S10[1] = s67;
  assign S10[2] = s70;
  assign S10[3] = s73;
  assign s87 = (~ s64 & ~ s67 & ~ s70 & ~ s73);
  assign M1[0] = s89;
  assign M1[1] = s92;
  assign M1[2] = s95;
  assign M1[3] = s98;
  assign s112 = (~ s89 & ~ s92 & ~ s95 & ~ s98);
  assign M10[0] = s114;
  assign M10[1] = s117;
  assign M10[2] = s120;
  assign M10[3] = s123;
  assign s137 = (~ s114 & ~ s117 & ~ s120 & ~ s123);
  Demux1 #(
    .Default(0)
  )
  Demux1_i27 (
    .sel( s139 ),
    .in( s33 ),
    .out_0( s138 ),
    .out_1( s140 )
  );
  assign s142 = (s39 & ~ s42 & ~ s45 & s48);
  assign s143 = (s64 & ~ s67 & s70 & ~ s73);
  assign s59 = ((~ s39 & s42 & ~ s45 & s48) | s62);
  assign s84 = ((~ s64 & s67 & s70 & ~ s73) | s87);
  assign s109 = ((~ s89 & s92 & ~ s95 & s98) | s112);
  assign s134 = ((~ s114 & s117 & ~ s120 & s123) | s137);
  assign s50 = (s5 | s140);
  assign s75 = (s15 | (s140 & s142));
  assign s100 = (s21 | (s140 & s143 & s142));
  assign s125 = (s27 | (s140 & s142 & s143 & (s89 & ~ s92 & ~ s95 & s98)));
  Mux_2x1 Mux_2x1_i28 (
    .sel( s50 ),
    .in_0( s40 ),
    .in_1( s39 ),
    .out( s51 )
  );
  Mux_2x1 Mux_2x1_i29 (
    .sel( s50 ),
    .in_0( s43 ),
    .in_1( s42 ),
    .out( s52 )
  );
  Mux_2x1 Mux_2x1_i30 (
    .sel( s50 ),
    .in_0( s46 ),
    .in_1( s45 ),
    .out( s53 )
  );
  assign s54 = (s50 ^ (s138 & ~ (s137 & s112 & s87 & s62)));
  Mux_2x1 Mux_2x1_i31 (
    .sel( s75 ),
    .in_0( s65 ),
    .in_1( s64 ),
    .out( s76 )
  );
  Mux_2x1 Mux_2x1_i32 (
    .sel( s75 ),
    .in_0( s68 ),
    .in_1( s67 ),
    .out( s77 )
  );
  Mux_2x1 Mux_2x1_i33 (
    .sel( s75 ),
    .in_0( s71 ),
    .in_1( s70 ),
    .out( s78 )
  );
  assign s79 = (s75 ^ (s138 & ~ (s137 & s112 & s87) & s62));
  Mux_2x1 Mux_2x1_i34 (
    .sel( s100 ),
    .in_0( s90 ),
    .in_1( s89 ),
    .out( s101 )
  );
  Mux_2x1 Mux_2x1_i35 (
    .sel( s100 ),
    .in_0( s93 ),
    .in_1( s92 ),
    .out( s102 )
  );
  Mux_2x1 Mux_2x1_i36 (
    .sel( s100 ),
    .in_0( s96 ),
    .in_1( s95 ),
    .out( s103 )
  );
  assign s104 = (s100 ^ (s138 & ~ (s137 & s112) & s87 & s62));
  Mux_2x1 Mux_2x1_i37 (
    .sel( s125 ),
    .in_0( s115 ),
    .in_1( s114 ),
    .out( s126 )
  );
  Mux_2x1 Mux_2x1_i38 (
    .sel( s125 ),
    .in_0( s118 ),
    .in_1( s117 ),
    .out( s127 )
  );
  Mux_2x1 Mux_2x1_i39 (
    .sel( s125 ),
    .in_0( s121 ),
    .in_1( s120 ),
    .out( s128 )
  );
  assign s129 = (s125 ^ (s138 & s62 & s87 & s112 & ~ s137));
  assign s55 = (s51 & s54);
  assign s57[0] = s54;
  assign s57[1] = s59;
  assign s80 = (s76 & s79);
  assign s82[0] = s79;
  assign s82[1] = s84;
  assign s105 = (s101 & s104);
  assign s107[0] = s104;
  assign s107[1] = s109;
  assign s130 = (s126 & s129);
  assign s132[0] = s129;
  assign s132[1] = s134;
  assign s56 = (s52 & s55);
  Mux_4x1 Mux_4x1_i40 (
    .sel( s57 ),
    .in_0( s39 ),
    .in_1( s40 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s38 )
  );
  assign s58[0] = s55;
  assign s58[1] = s59;
  assign s81 = (s77 & s80);
  Mux_4x1 Mux_4x1_i41 (
    .sel( s82 ),
    .in_0( s64 ),
    .in_1( s65 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s63 )
  );
  assign s83[0] = s80;
  assign s83[1] = s84;
  assign s106 = (s102 & s105);
  Mux_4x1 Mux_4x1_i42 (
    .sel( s107 ),
    .in_0( s89 ),
    .in_1( s90 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s88 )
  );
  assign s108[0] = s105;
  assign s108[1] = s109;
  assign s131 = (s127 & s130);
  Mux_4x1 Mux_4x1_i43 (
    .sel( s132 ),
    .in_0( s114 ),
    .in_1( s115 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s113 )
  );
  assign s133[0] = s130;
  assign s133[1] = s134;
  Mux_4x1 Mux_4x1_i44 (
    .sel( s58 ),
    .in_0( s42 ),
    .in_1( s43 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s41 )
  );
  assign s60[0] = s56;
  assign s60[1] = s59;
  assign s61[0] = (s53 & s56);
  assign s61[1] = s59;
  Mux_4x1 Mux_4x1_i45 (
    .sel( s83 ),
    .in_0( s67 ),
    .in_1( s68 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s66 )
  );
  assign s85[0] = s81;
  assign s85[1] = s84;
  assign s86[0] = (s78 & s81);
  assign s86[1] = s84;
  Mux_4x1 Mux_4x1_i46 (
    .sel( s108 ),
    .in_0( s92 ),
    .in_1( s93 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s91 )
  );
  assign s110[0] = s106;
  assign s110[1] = s109;
  assign s111[0] = (s103 & s106);
  assign s111[1] = s109;
  Mux_4x1 Mux_4x1_i47 (
    .sel( s133 ),
    .in_0( s117 ),
    .in_1( s118 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s116 )
  );
  assign s135[0] = s131;
  assign s135[1] = s134;
  assign s136[0] = (s128 & s131);
  assign s136[1] = s134;
  Mux_4x1 Mux_4x1_i48 (
    .sel( s60 ),
    .in_0( s45 ),
    .in_1( s46 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s44 )
  );
  Mux_4x1 Mux_4x1_i49 (
    .sel( s61 ),
    .in_0( s48 ),
    .in_1( s49 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s47 )
  );
  Mux_4x1 Mux_4x1_i50 (
    .sel( s85 ),
    .in_0( s70 ),
    .in_1( s71 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s69 )
  );
  Mux_4x1 Mux_4x1_i51 (
    .sel( s86 ),
    .in_0( s73 ),
    .in_1( s74 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s72 )
  );
  Mux_4x1 Mux_4x1_i52 (
    .sel( s110 ),
    .in_0( s95 ),
    .in_1( s96 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s94 )
  );
  Mux_4x1 Mux_4x1_i53 (
    .sel( s111 ),
    .in_0( s98 ),
    .in_1( s99 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s97 )
  );
  Mux_4x1 Mux_4x1_i54 (
    .sel( s135 ),
    .in_0( s120 ),
    .in_1( s121 ),
    .in_2( 1'b0 ),
    .in_3( 1'b0 ),
    .out( s119 )
  );
  Mux_4x1 Mux_4x1_i55 (
    .sel( s136 ),
    .in_0( s123 ),
    .in_1( s124 ),
    .in_2( 1'b0 ),
    .in_3( 1'b1 ),
    .out( s122 )
  );
endmodule
